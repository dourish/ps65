;;;
;;; 6502 Pascal compiler
;;; A basic recursive-descent compiler for a subset of Pascal.
;;; The compiler itself is onne-pass and compiles to p-code; a
;;; separate program executes the p-code (and might clean up
;;; any lingering references in the p-code).
;;;
;;; Written for the Mite 6502 homebrew.
;;;
;;; Paul Dourish, March 2020 (altouhgh based on something
;;; that I intiially wrote in 1985).
;;;


TXTPTR=$80
WORD=$7EC0
STSTACKSPACE=$6000
SCRATCH=$0010       ; workpad
STLAST=0060  ; and 0061
STSTACK=0062 ; and 0063

* = $0300
  jmp start

#include "../mitemon/decl.a65"


;;;
;;; Presume that we enter this code from the FORTH runtime on the Mite.
;;; That means that (1) the upper half of the zero page is reserved
;;; for the stack, (2) X is reserved and already in operation as the
;;; stack pointer, (3) whatever I need for SD card access is available,
;;; annd (4) ACIA annd VIA are already up and running
;;;

;;; CONSTANTS
TK_PROGRAM=1
TK_BEGIN=2
TK_END=3
TK_SEMIC=4
TK_WRITE=5
TK_WRITELN=6
TK_IF=7
TK_THEN=8
TK_ELSE=9
TK_WHILE=10
TK_FOR=11
TK_ASSIGN=12
TK_COLON=13
TK_INTEGER=14
TK_PROCEDURE=15
TK_FUNCTION=16
TK_NUMBER=17
TK_IDENTIFIER=18
TK_BOOLAND=19
TK_BOOLOR=20
TK_BOOLNOT=21
TK_BITAND=22
TK_BITOR=23
TK_BITNOT=24
TK_EQUAL=25
TK_GREATER=26
TK_LESS=27
TK_GREATEREQ=28
TK_LESSEQ=29
TK_NOTEQUAL=30
TK_OPENPAREN=31
TK_CLOSEPAREN=32
TK_CONST=33
TK_VAR=34
TK_PERIOD=35


;;;
;;; Token table. Each entry is a link field, a token string length,
;;; the token string, and then the token value.
;;;
;;; BUG don't really need the pointer if we know that each entry is
;;; nchars plus two.
;;;
tokentable
.byte 7, "program", TK_PROGRAM
.byte 5, "begin", TK_BEGIN
.byte 3, "end", TK_END
.byte 1, ";", TK_SEMIC
.byte 5, "write", TK_WRITE
.byte 7, "writeln", TK_WRITELN
.byte 2, "if", TK_IF
.byte 4, "then", TK_THEN
.byte 4, "else", TK_ELSE
.byte 5, "while", TK_WHILE
.byte 3, "for", TK_FOR
.byte 2, ":=", TK_ASSIGN
.byte 1, ":", TK_COLON
.byte 7, "integer", TK_INTEGER
.byte 9, "procedure", TK_PROCEDURE
.byte 8, "function", TK_FUNCTION
.byte 3, "and", TK_BOOLAND
.byte 2, "or", TK_BOOLOR
.byte 3, "not", TK_BOOLNOT
.byte 1, "&", TK_BITAND
.byte 1, "|", TK_BITOR
.byte 1, "!", TK_BITNOT
.byte 1, "=", TK_EQUAL
.byte 1, ">", TK_GREATER
.byte 1, "<", TK_LESS
.byte 2, "<=", TK_GREATEREQ
.byte 2, ">=", TK_LESSEQ
.byte 2, "<>", TK_NOTEQUAL
.byte 1, "(", TK_OPENPAREN
.byte 1, ")", TK_CLOSEPAREN
.byte 1, ".", TK_PERIOD
.byte 5, "const", TK_CONST
.byte 3, "var", TK_VAR
.byte 0

;;; ZP locations

;;; other variables




start
  ;; initialize symbol table
  stz STSTACK       ; STSTACK won't get deep, so place it at bottom
  lda #1            ; of the hardware stack page
  sta STSTACK+1
  lda #<STSTACKSPACE
  sta STLAST
  lda #>STSTACKSPACE
  sta STLAST+1
  lda #0
  stz STLAST        ; add a null entry
  jsr addtableframe ; make initial frame
  
  ;; test harness -- use key input to try different routines
testloop
  jsr ROMGET
.(
  cmp #"a
  bne next
  jsr addtableframe
  bra testloop
next
.)
.(
  cmp #"d
  bne next
  jsr droptableframe
  bra testloop
next
.)
.(
  cmp #"c
  bne next
  jsr comptest
  bra testloop
next
.)
.(
  cmp #"l
  bne next
  jsr listframe
  bra testloop
next
.)
.(
  cmp #"q
  bne next
  rts
next
.)
.(
  cmp #"v
  bne next
  jsr addtestvar
  bra testloop
next
.)
.(
  cmp #"s
  bne next
  jsr findtestvar
  bra testloop
next
.)
  lda #"?
  jsr ROMPUTA
  jsr crlf
  bra testloop

comptest
  lda #<testbuf
  sta TXTPTR
  lda #>testbuf
  sta TXTPTR+1
nextword
  jsr skipspace
  jsr getword
  lda WORD
  beq end
  jsr findtoken
  jsr putax
  jsr crlf
  bra nextword

end
  rts




;;;
;;; SCANNER/TOKENIZER.
;;;
;;; Read words from the input and deliver them  as token values
;;; from the token table.
;;;

skipspace
.(
  ldy #0
nextchar
  lda (TXTPTR),y
  cmp #32
  beq space
  cmp #8
  beq space
  cmp #10
  beq space
  cmp #13
  beq space
  tya
  beq skip
  clc
  adc TXTPTR
  sta TXTPTR
  bcc skip
  inc TXTPTR+1
skip
  rts
space
  iny
  bra nextchar
.)
  


getword
.(
  lda (TXTPTR)
  bne continue
  jmp endofdata

continue  
  ;; is it a number?
  cmp #"0
  bcc notnumber
  cmp #":
  bcs notnumber
  jmp readnumber
  
notnumber
;; is it an alpha?
  cmp #"A
  bcc notalpha
  cmp #"[
  bcc isalpha
  cmp #"a
  bcc notalpha
  cmp #"{
  bcs notalpha
isalpha
  jmp readalphanum

notalpha
  ;; it's a symbol
  sta WORD
  ;; special case for symbols which might be more than one character
  ldy #1
  cmp #".
  bne next
  lda (TXTPTR),y
  cmp #".
  bne finish
  sta WORD,y
  iny
  bra finish
next
.)
.(
  lda (TXTPTR)
  cmp #"<
  bne next
  lda (TXTPTR),y
  cmp #">
  beq second
  cmp #"=
  bne next
second
  sta WORD,y
  iny
  bra finish
next
.)
.(
  lda (TXTPTR)
  cmp #">"
  bne next
  lda (TXTPTR),y
  cmp #"=
  bne next
  sta WORD,y
  iny
  bra finish
next
.)
  cmp #":
  lda (TXTPTR),y
  cmp #"=
  bne finish
  sta WORD,y
  iny
finish
  lda #0
  sta WORD,y
.(
clc
  tya
  beq skip
  adc TXTPTR
  sta TXTPTR
  bcc skip
  inc TXTPTR+1
skip
.)
rts

endofdata
  stz WORD
  rts

readalphanum
.(
  ldy #0
readnext
  ;; keep on going until we get to a space or a punctuation mark
  ;; other than underscore
  lda (TXTPTR),y
checkupper
  cmp #"A
  bcc checknum
  cmp #"[
  bcc okay
checkunderscore
  cmp #"_
  beq okay
  cmp #"a
  bcc checknum
  cmp #"{
  bcc okay
  bra nope

checknum
  cmp #"0
  bcc nope
  cmp #":
  bcs nope
okay
  sta WORD,y
  iny
  bra readnext

nope
  lda #0
  sta WORD,y
  tya               ; update TXTPTR to point to first non alphanum char
  beq skip
  clc
  adc TXTPTR
  sta TXTPTR
  bcc skip
  inc TXTPTR+1
skip
.)
  rts

readnumber
.(
  ldy #0
nextchar
  lda (TXTPTR),y
  cmp #"0
  bcc nope
  cmp #":
  bcs nope
  sta WORD,y
  iny
  bra nextchar
nope
  lda #0
  sta WORD,y
  clc
  tya
  beq skip
  adc TXTPTR
  sta TXTPTR
  bcc skip
  inc TXTPTR+1
skip
.)
  rts

;;;
;;; Input handling. I need to be able to distinguish lookig at the
;;; current character and consuming it/moving to the next.
;;;

nextchar
.(
;; return next character in buffer, incrementing buffer
  ;; pointer. return NUL if we run off the end of the buffer.
  ;; later, when we do this for real, we'll potentially refill
  ;; the buffer
  lda (TXTPTR)
  pha
  inc TXTPTR
  bne skip
  inc TXTPTR+1
skip
  pla
  rts
.)




thischar
  ;; return character at current pointer
  lda (TXTPTR)
  rts
  

findtoken
  lda WORD
  bne searchtable
  lda #0            ; return NUL token if no input data
  rts

searchtable

  lda #<tokentable  ; SCRATCH/+1 is the pointer to current entry
  sta SCRATCH
  lda #>tokentable
  sta SCRATCH+1

testtoken
  lda (SCRATCH)     ; load character count for this entry
  beq endoftable    ; zero indicates end of table

  sta SCRATCH+4     ; cache the character count

  inc               ; next entry is at base + char count + 2
  inc               ; calculate pointer and store in S+2/3
  clc
  adc SCRATCH       ; cache pointer to next entry
  sta SCRATCH+2
  lda SCRATCH+1
  adc #0
  sta SCRATCH+3
  
.(
  inc SCRATCH       ; move pointer past character count
  bne skip
  inc SCRATCH+1
skip
.)

  ldy #0
testchar
  lda WORD,y
  cmp (SCRATCH),y
  bne matchfail
  iny               ; this char good, so move onto next one
  cpy SCRATCH+4     ; check if we have reached limit
  bne testchar
gotmatch
  lda (SCRATCH),y   ; found match, return the token value
  rts

matchfail
  lda SCRATCH+2     ; match failed so move onto next entry
  sta SCRATCH
  lda SCRATCH+3
  sta SCRATCH+1
  bra testtoken

endoftable
.(
  ;; no token found in the table, so presume it's an identified
  ;; if it starts with an alphabetical character, or a number
  ;; otherwise
  ldy #0
  lda WORD,y
  cmp #"A
  bcc notalpha
  cmp #"[
  bcc isalpha
  cmp #"a
  bcc notalpha
  cmp #"{
  bcs notalpha
isalpha
  lda #TK_IDENTIFIER
  rts
notalpha
  lda #TK_NUMBER
  rts
.)
  


;;;
;;; SYMBOL TABLE
;;;
;;; The symbol table is essentially a stack of tables, in order to
;;; manage scope appropriately. each subtable is a "table frame".
;;; each table frame ends with a null entry, which is the point
;;; where new entries are added. essentially, it is one table, but
;;; we have a separate stack of pointers into the table signalling
;;; each frame. to search the table, grab the pointer to the most
;;; recent frame, and begin our search there; then if that fails,
;;; grab the pointer to the next most recent frame, etc.
;;;

;;; one byte for symbol length
;;; one byte for symbol type (variable, procedure, function)
;;; two bytes for symbol location (address for proc/fun)
;;; n bytes for symbol name

;;; looking up a symbol generates a pair -- level offset and address
;;; level offset is based on how many table frames we had to look through

;;; add a symbol. write it at the end (over the null entry) and then
;;; add a new null entry.

;;; add a table frame -- so update the frame stack and set a null
;;; entry for the new table
addtableframe
  ;; increment pointer to new entry. we know that that need only
  ;; be one byte ahead of the last null entry.
.(
  inc STLAST
  bne skip
  inc STLAST+1
skip
.)

  lda #0            ; add new null table entry 
  sta (STLAST)

.(
  clc               ; open new stack entry
  lda STSTACK
  adc #2
  sta STSTACK
  bcc skip
  inc STSTACK+1
skip
.)
  ldy #1            ; add new frame entry to stack
  lda STLAST
  sta (STSTACK)
  lda STLAST+1
  sta (STSTACK),y

  rts

;;; remove a table frame
;;; in the new top frame, scan forward to find the null entry
droptableframe
  ;; cache the address of the stack frame we're dropping
  ldy #1
  lda (STSTACK)
  sta SCRATCH
  lda (STSTACK),y
  sta SCRATCH+1

.(
  sec               ; drop top item from stack
  lda STSTACK
  sbc #2
  sta STSTACK
  bcs skip
  dec STSTACK+1
skip
.)


  ;; set STLAST to be one byte before the old stack frame
  ;; which should be prior null entry
  sec
  lda SCRATCH
  sbc #1  
  sta STLAST
  lda SCRATCH+1
  sbc #0
  sta STLAST+1

  rts


addtestvar
.(
  lda #":
  jsr ROMPUTA
  ldy #0
  
inputloop
  jsr ROMGET
  cmp #13
  beq doneinput
  jsr ROMPUTA
  sta WORD,y
  iny
  bra inputloop

doneinput
  jsr crlf
  jsr addsymbol
  
  rts
.)


findtestvar
.(
  lda #"?
  jsr ROMPUTA
  ldy #0
  
inputloop
  jsr ROMGET
  cmp #13
  beq doneinput
  jsr ROMPUTA
  sta WORD,y
  iny
  bra inputloop

doneinput
  jsr crlf
  jsr findsymbol
  bcc nope
  lda SCRATCH+1
  jsr putax
  lda SCRATCH
  jsr putax
  jsr crlf
  rts

nope
  lda #"x
  jsr ROMPUTA
  jsr ROMPUTA
  jsr ROMPUTA
  jsr ROMPUTA
  jsr crlf
  rts
.)


listframe
.(
  ;; get ptr to start of frame
  ldy #1
  lda (STSTACK)
  sta SCRATCH
  lda (STSTACK),y
  sta SCRATCH+1

listnext
  lda (SCRATCH)
  beq endofframe    ; 0 signals end of frame

  sta SCRATCH+2     ; store the symbol length
.(
clc               ; skip ahead to name
  lda SCRATCH
  adc #4
  sta SCRATCH
  bcc skip
  inc SCRATCH+1
skip
.)
ldy #0
printloop
  lda (SCRATCH),y   ; fetch and print character of name
  jsr ROMPUTA
  iny
  cpy SCRATCH+2     ; stop when we reach the char count
  bne printloop

.(
tya
  clc               ; advance to next entry
  adc SCRATCH
  sta SCRATCH
  bcc skip
  inc SCRATCH+1
skip
.)
  
  jsr crlf
  bra listnext

endofframe
  rts
.)
  


;;; add a symbol to the symbol table. on entry, the symbol is in
;;; WORD and Y holds the length in characters. the entry is added
;;; to the currently active table frame, and then a new NUL entry
;;; is added at the end.
addsymbol
  tya
  sta (STLAST)

  ;; where do we get the type? where do we get the location?
  ;; for now, leave those out

.(
  clc
  lda STLAST
  adc #4
  sta STLAST
  bcc skip
  inc STLAST+1
skip
.)

  sty SCRATCH
  ldy #0
copyloop
  lda WORD,y
  sta (STLAST),y
  iny
  cpy SCRATCH
  bne copyloop

.(
  clc
  tya
  adc STLAST
  sta STLAST
  bcc skip
  inc STLAST+1
skip
.)

  lda #0
  sta (STLAST)

  rts


;;; look up a symbol in the symbol table. on entry, the symbol is in WORD
;;; and Y contains the character count. On exit, A is 0 if it is not
;;; found, or 1 if it is found. SCRATCH/S+1 contain a pointer to the
;;; symbol table entry, S+2 is the level count, and S+3 is the offset.
findsymbol
.(
  sty SCRATCH+4     ; cache the character count
  stz SCRATCH+5     ; temp level count

  ;; start with most local frame
  ldy #1
  lda (STSTACK)
  sta SCRATCH+2
  lda (STSTACK),y
  sta SCRATCH+3

nextframe
  ;; search here
  jsr searchframe

  ;; found?
  bcs foundsymbol

  ;; not found, move to next frame
  inc SCRATCH+5     ; bump up level count
  sec
  lda SCRATCH+2
  sbc #2
  sta SCRATCH+2
  bcc nomatch       ; if carry clear, we've moved page, so exit
  bra nextframe     ; otherwise, search next frame

nomatch
  clc
  rts

foundsymbol
  sec
  rts
.)


;;; search for symbol in WORD just in the a single symbol table frame.
;;; on entry, SCRATCH+4 is the character count. SCRATCH+2/3 is the start
;;; of the frame. on exit, set carry to signal success and leave pointer
;;; in SCRATCH/S+1.
searchframe
  lda SCRATCH+2
  sta SCRATCH
  lda SCRATCH+3
  sta SCRATCH+1
.(
testnext
  ;; begin by calculating the address of the NEXT entry
.(
clc
  lda (SCRATCH)
  beq endofframe    ; short-circuit if we hit end of frame
  adc SCRATCH
  sta SCRATCH+6
  lda SCRATCH+1
  adc #0
  sta SCRATCH+7

  lda SCRATCH+6
  adc #4
  sta SCRATCH+6
  bcc skip
  inc SCRATCH+7
skip
.)  

  lda (SCRATCH)
  cmp SCRATCH+4
  bne skipmatch

.(
clc               ; skip ahead to name
  lda SCRATCH
  adc #4
  sta SCRATCH
  bcc skip
  inc SCRATCH+1
skip
.)

  ldy #0
matchloop
  lda (SCRATCH),y   ; test character by character
  cmp WORD,y
  bne skipmatch
  iny
  cpy SCRATCH+4     ; stop when we reach the char count
  bne matchloop
  bra foundmatch

skipmatch
  lda SCRATCH+6
  sta SCRATCH
  lda SCRATCH+7
  sta SCRATCH+1
  bra testnext

endofframe
  clc
  rts
.)

foundmatch
  sec
  rts

;;;
;;; SUPPORT ROUTINES
;;;

crlf
  lda #10
  jsr ROMPUTA
  lda #13
  jsr ROMPUTA
  rts

putax
.(
  phy

  pha
wait_txd_empty
  lda ACIA_STATUS
  and #$10
  beq wait_txd_empty
  pla
  pha             ; put a copy back
  clc
  and #$f0
  ror
  ror
  ror
  ror
  tay
  lda hextable,y
  sta ACIA_DATA
wait_txd_empty2
  lda ACIA_STATUS
  and #$10
  beq wait_txd_empty2
  pla
  clc
  and #$0f
  tay
  lda hextable,y
  sta ACIA_DATA
.)
  ply
  rts
hextable:   .byte "0123456789ABCDEF"

ROMPUTA
.(
  pha
wait_txd_empty
  lda ACIA_STATUS
  and #$10
  beq wait_txd_empty
  pla
  sta ACIA_DATA
.)
  rts

ROMGET
.(
wait_rxd_full    
  lda ACIA_STATUS
  and #$08
  beq wait_rxd_full
.)
  lda ACIA_DATA
  rts



testbuf
.byte "   "
.byte "program tprog;"
.byte "var"
.byte "   a :  integer;"
.byte "procedure test;"
.byte "var b : integer;"
.byte "begin"
.byte "   a := 10;"
.byte "   b := 4+3;"
.byte "   writeln(b);"
.byte "   writeln(a);"
.byte "end;"
.byte "begin"
.byte "   test "
.byte "end."
.byte 0
